import { AxisDomainPath } from '@/visx-next/AxisDomainPath';

import { getTicksData } from './getTicksData';
import { AxisRendererProps } from './SVGAxis';
import { SVGAxisTicks } from './SVGAxisTicks';

export function SVGAxisRenderer({
  orientation,
  scale,
  margin,
  tickLabelProps,
  domainPathProps = {},
  outerTickLength = 0,
  hideAxisLine = false,
  tickLength = 8,
  hideTicks = false,
  tickGroupProps = {},
  tickLineProps = {},
  tickLabelPadding = 6,
  rangePadding,
  springConfig,
  animate = true,
  renderingOffset = 0,
  hideZero = false,
  tickFormat,
  tickCount,
  tickValues,
  theme,
  tickLabelAngle
}: AxisRendererProps) {
  const isLeft = orientation === 'left';
  const isTop = orientation === 'top';
  const isVertical = orientation === 'left' || orientation === 'right';
  const tickSign = isLeft || isTop ? -1 : 1;
  const rangeFrom = Number(scale.range()[0]) ?? 0;
  const rangeTo = Number(scale.range()[1]) ?? 0;
  const domainRange = isVertical
    ? [rangeFrom + rangePadding, rangeTo - rangePadding]
    : [rangeFrom - rangePadding, rangeTo + rangePadding];
  const ticks = getTicksData(scale, hideZero, tickFormat, tickCount, tickValues);

  return (
    <>
      <SVGAxisTicks
        hideTicks={hideTicks}
        orientation={orientation}
        scale={scale}
        tickLabelProps={tickLabelProps}
        tickGroupProps={tickGroupProps}
        tickLength={tickLength}
        ticks={ticks}
        tickLineProps={tickLineProps}
        renderingOffset={renderingOffset}
        animate={animate}
        springConfig={springConfig}
        tickLabelPadding={tickLabelPadding}
        margin={margin}
        labelStyles={theme.svgLabelSmall}
        tickLabelAngle={tickLabelAngle}
      />
      {!hideAxisLine && (
        <AxisDomainPath
          data-testid="axis-domain"
          {...domainPathProps}
          orientation={orientation}
          renderingOffset={renderingOffset}
          range={domainRange}
          outerTickLength={outerTickLength}
          tickSign={tickSign}
          animate={animate}
          springConfig={springConfig}
        />
      )}
    </>
  );
}
